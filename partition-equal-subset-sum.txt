https://leetcode.com/problems/partition-equal-subset-sum/
class Solution {
private:
    bool dfs(vector<int>& nums, int n, int target,vector<vector<optional<bool>>> &memo){
        //base cases
        if(target==0) return true;
        if(n==0 || target<0) return false;
        if (memo[n][target] != nullopt) {
            return (memo[n][target] == true);
        }
        //recursive call
        bool ans = dfs(nums, n-1, target-nums[n-1], memo) || dfs(nums, n-1, target, memo);
        memo[n][target] = ans;
        return ans;
    }
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int i=0;i<n;i++) sum+=nums[i];
        int target = sum/2;
        if(sum%2!=0) return false;
        vector<vector<optional<bool>>> memo(n + 1, vector<optional<bool>>(target + 1, nullopt));
        return dfs(nums, n - 1, target, memo);
    }
};